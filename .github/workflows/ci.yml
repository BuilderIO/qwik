name: Qwik CI

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: npm-cache-

      - name: Install NPM Dependencies
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Build
        run: yarn build.prod

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist-builder-io-qwik
          path: dist-dev/@builder.io-qwik
          if-no-files-found: error

  # lint:
  #   name: Lint
  #   if: ${{ github.event_name != 'release' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Cache Dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: npm-cache-${{ hashFiles('yarn.lock') }}
  #         restore-keys: npm-cache-

  #     - name: Install NPM Dependencies
  #       run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

  #     - name: Prettier Check
  #       run: yarn prettier-check

  #     - name: Lint Check
  #       run: yarn lint

  # unit-tests:
  #   name: Unit Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10.x
  #         registry-url: https://registry.npmjs.org/

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Cache Dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: npm-cache-${{ hashFiles('yarn.lock') }}
  #         restore-keys: npm-cache-

  #     - name: Install NPM Dependencies
  #       run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

  #     - name: Unit Tests
  #       run: |
  #         yarn build
  #         yarn test.unit

  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest

  #   timeout-minutes: 15

  #   steps:
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10.x
  #         registry-url: https://registry.npmjs.org/

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: E2E Tests
  #       uses: cypress-io/github-action@v2
  #       with:
  #         install-command: yarn --frozen-lockfile --ignore-engines
  #         start: yarn integration.server.prod
  #         wait-on: 'http://localhost:8081'
  #         wait-on-timeout: 120
  #         browser: chrome
  #         record: true
  #         group: 'Qwik E2E Test Group'
  #         spec: cypress/integration/*
  #         config-file: cypress/cypress.json
  #         config: defaultCommandTimeout=10000
  #       env:
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Upload Videos Artifacts
  #       uses: actions/upload-artifact@v1
  #       if: always()
  #       with:
  #         name: Cypress Videos
  #         path: cypress/videos

  optimizer-build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build.platform.optimizer
              strip -x *.node

          - host: windows-latest
            build: yarn build.platform.optimizer
            target: x86_64-pc-windows-msvc

          # - host: windows-latest
          #   build: |
          #     export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=32;
          #     export CARGO_PROFILE_RELEASE_LTO=false
          #     yarn build.platform.optimizer --target i686-pc-windows-msvc
          #     yarn test
          #   target: i686-pc-windows-msvc
          #   setup: |
          #     choco install nodejs-lts --x86 -y --force
          #     echo "C:\Program Files (x86)\nodejs" >> $GITHUB_PATH

          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   docker: |
          #     docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
          #     docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian
          #     docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian builder
          #   build: |
          #     docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder yarn build.platform.optimizer && strip qwik-optimizer.linux-x64-gnu.node

          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   docker: |
          #     docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
          #     docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #     docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
          #   build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder yarn build.platform.optimizer && strip qwik-optimizer.linux-x64-musl.node

          # - host: macos-latest
          #   target: aarch64-apple-darwin
          #   build: |
          #     yarn build.platform.optimizer --target=aarch64-apple-darwin
          #     strip -x *.node

          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu -y
          #   build: |
          #     yarn build.platform.optimizer --target=aarch64-unknown-linux-gnu
          #     aarch64-linux-gnu-strip qwik-optimizer.linux-arm64-gnu.node

          # - host: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
          #   build: |
          #     yarn build.platform.optimizer --target=armv7-unknown-linux-gnueabihf
          #     arm-linux-gnueabihf-strip qwik-optimizer.linux-arm-gnueabihf.node

          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   downloadTarget: aarch64-unknown-linux-musl
          #   docker: |
          #     docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
          #     docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #     docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
          #   build: |
          #     docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder sh -c "yarn build.platform.optimizer --target=aarch64-unknown-linux-musl && /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip qwik-optimizer.linux-arm64-musl.node"

          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: yarn build.platform.optimizer --target aarch64-pc-windows-msvc

    name: Optimizer Build - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ./src/optimizer/napi/
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile --manifest-path=src/optimizer/napi/

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@16-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@16-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-${{ matrix.settings.target }}-node@16-${{ hashFiles('yarn.lock') }}

      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.settings.docker }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Install NPM Dependencies
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000

      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  release:
    name: Release
    if: ${{ github.event_name != 'release' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - optimizer-build
      # - lint
      # - unit-tests
      # - e2e-tests

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Display Build Output
        run: ls -R

      - name: Pack @builder.io/qwik
        if: ${{ github.event_name == 'release' }}
        run: |
          cd dist-builder-io-qwik
          mv `npm pack` ../builder.io-qwik.tgz

      - name: Upload Qwik Package
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-artifact@master
        with:
          name: Qwik Package
          path: builder.io-qwik.tgz

      - name: Publish @builder.io/qwik
        if: ${{ github.event_name != 'release' }}
        run: |
          cd dist-builder-io-qwik
          mv `npm pack` ../builder.io-qwik.tgz
